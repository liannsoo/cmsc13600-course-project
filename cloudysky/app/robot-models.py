"""
robot-models.py
Generated by ChatGPT (GPT-5 Thinking) on 2025-10-31.

Prompt used:
"Generate a Django models.py file for a chat platform with:
 - Users of type serf and administrator
 - Posts made by users
 - Comments attached to posts
 - Administrators can hide posts and comments and attach a reason
 - Users have avatars
 - Media files can be attached to posts or comments
 Write valid Django model code only. Use django.contrib.auth.models.User."
"""

from django.db import models
from django.contrib.auth.models import User
from django.db.models import Q
from django.utils import timezone


class ModerationReason(models.Model):
    """Catalog of vetted reasons admins can attach when hiding content."""
    text = models.CharField(max_length=255, unique=True)

    def __str__(self) -> str:
        return self.text


class UserProfile(models.Model):
    """Extends Django auth User with role and profile fields."""
    ROLE_CHOICES = (
        ("serf", "Serf"),
        ("admin", "Administrator"),
    )
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name="profile")
    role = models.CharField(max_length=10, choices=ROLE_CHOICES, default="serf")
    bio = models.TextField(blank=True, null=True)

    def __str__(self) -> str:
        return f"{self.user.username} ({self.role})"


class Avatar(models.Model):
    """User avatar images (keep history by allowing multiple per user)."""
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name="avatars")
    image = models.ImageField(upload_to="avatars/")
    uploaded_at = models.DateTimeField(auto_now_add=True)
    is_active = models.BooleanField(default=True)

    def __str__(self) -> str:
        return f"Avatar({self.user.username}, active={self.is_active})"


class Post(models.Model):
    """Posts made by users; admins can hide with a reason."""
    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name="posts")
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

    # Moderation
    is_hidden = models.BooleanField(default=False)
    hidden_by = models.ForeignKey(
        User,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="posts_hidden",
        help_text="Administrator who hid this post (if any).",
    )
    hidden_at = models.DateTimeField(null=True, blank=True)
    hidden_reason = models.ForeignKey(
        ModerationReason,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        help_text="Reason chosen by administrator when hiding.",
    )

    def hide(self, admin_user: User, reason: ModerationReason | None = None) -> None:
        self.is_hidden = True
        self.hidden_by = admin_user
        self.hidden_reason = reason
        self.hidden_at = timezone.now()
        self.save(update_fields=["is_hidden", "hidden_by", "hidden_reason", "hidden_at"])

    def __str__(self) -> str:
        return f"Post({self.id}) by {self.author.username}"


class Comment(models.Model):
    """Comments attached to posts; admins can hide with a reason."""
    post = models.ForeignKey(Post, on_delete=models.CASCADE, related_name="comments")
    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name="comments")
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

    # Moderation
    is_hidden = models.BooleanField(default=False)
    hidden_by = models.ForeignKey(
        User,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="comments_hidden",
        help_text="Administrator who hid this comment (if any).",
    )
    hidden_at = models.DateTimeField(null=True, blank=True)
    hidden_reason = models.ForeignKey(
        ModerationReason,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        help_text="Reason chosen by administrator when hiding.",
    )

    def hide(self, admin_user: User, reason: ModerationReason | None = None) -> None:
        self.is_hidden = True
        self.hidden_by = admin_user
        self.hidden_reason = reason
        self.hidden_at = timezone.now()
        self.save(update_fields=["is_hidden", "hidden_by", "hidden_reason", "hidden_at"])

    def __str__(self) -> str:
        return f"Comment({self.id}) by {self.author.username} on Post({self.post_id})"


class Media(models.Model):
    """
    Binary media that can be attached to either a Post or a Comment.
    Exactly one of (post, comment) must be set.
    """
    post = models.ForeignKey(Post, on_delete=models.CASCADE, null=True, blank=True, related_name="media")
    comment = models.ForeignKey(Comment, on_delete=models.CASCADE, null=True, blank=True, related_name="media")
    file = models.FileField(upload_to="media_uploads/")
    uploaded_at = models.DateTimeField(auto_now_add=True)
    uploaded_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name="media_uploaded")

    class Meta:
        constraints = [
            # Enforce XOR: exactly one of post or comment is non-null.
            models.CheckConstraint(
                name="media_attached_to_exactly_one",
                check=(
                    # (post is not null AND comment is null) OR (post is null AND comment is not null)
                    (Q(post__isnull=False) & Q(comment__isnull=True)) |
                    (Q(post__isnull=True) & Q(comment__isnull=False))
                ),
            )
        ]

    def __str__(self) -> str:
        target = f"Post({self.post_id})" if self.post_id else f"Comment({self.comment_id})"
        return f"Media({self.id}) -> {target}"

